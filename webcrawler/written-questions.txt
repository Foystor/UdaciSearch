Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

A1. Because the record method in ProfilingState class sum the amount of time taken by the parse method in all threads.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        Because a multi-threading program requires hardware and operating system support, otherwise it can't run as fast
        as it is supposed to.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        We can run the parallel web crawler on a computer with a multi-thread CPU, and the operating system needs to
        have the required drivers.

        Because this scenario fulfills the requirement of multi-threading, which makes it work as expected.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    Performance profiling.

    (b) What are the join points of the Profiler in the web crawler program?

    The methods and the constructor of the Profiler are the join points, such as the wrap method and the writeData method.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

A4. Builder pattern
    - Usage: CrawlerConfiguration class, CrawlResult class, PageParser interface and ParserModule class.
    - Like: Usually supports readable method chaining.
    - Dislike: It's verbose to write a Builder class.

    Dependency Injection
    - Usage: ParallelWebCrawler class, SequentialWebCrawler class, WebCrawlerMain class, PageParserFactoryImpl class and
    ProfilerImpl class.
    - Like: Don't need to create objects manually.
    - Dislike: Have to figure out what implementation was actually injected.

    Aspect Oriented Programming (AOP)
    - Usage: ProfilerImpl class.
    - Like: Separate cross-cutting concerns into separate aspects.
    - Dislike: Have to write a lot more codes and take care of throwing the same Throwable.




